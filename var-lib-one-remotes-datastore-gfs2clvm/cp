#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2012, OpenNebula Project Leads (OpenNebula.org)             #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

###############################################################################
# This script is used to copy a VM image (SRC) to the image repository as DST
# Several SRC types are supported
###############################################################################

# -------- Set up the environment to source common tools & conf ------------ 

if [ -z "${ONE_LOCATION}" ]; then
    LIB_LOCATION=/usr/lib/one
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    LIB_LOCATION=$ONE_LOCATION/lib
    TMCOMMON=$ONE_LOCATION/lib/one/remotes/tm/tm_common.sh
fi

. /var/lib/one/remotes/scripts_common.sh

DRIVER_PATH=$(dirname $0)
source ${DRIVER_PATH}/../libfs.sh

# include arg_path function
. $TMCOMMON

# include file with LVM helpers definition
. /etc/one/tm/gfs2clvmrc



# -------- Get cp and datastore arguments from OpenNebula core ------------

DRV_ACTION=$1
ID=$2

XPATH="${DRIVER_PATH}/../xpath.rb -b $DRV_ACTION"

unset i XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <($XPATH     /DS_DRIVER_ACTION_DATA/DATASTORE/BASE_PATH \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/RESTRICTED_DIRS \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/SAFE_DIRS \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/UMASK \
                    /DS_DRIVER_ACTION_DATA/IMAGE/PATH)

BASE_PATH="${XPATH_ELEMENTS[0]}"
RESTRICTED_DIRS="${XPATH_ELEMENTS[1]}"
SAFE_DIRS="${XPATH_ELEMENTS[2]}"
UMASK="${XPATH_ELEMENTS[3]}"
SRC="${XPATH_ELEMENTS[4]}"

mkdir -p "$BASE_PATH"
set_up_datastore "$BASE_PATH" "$RESTRICTED_DIRS" "$SAFE_DIRS" "$UMASK"

DST=`generate_image_path`
DST_BASENAME=$( basename "$DST" )
SRC_PATH=`arg_path $SRC`

# ------------ Determine Volume Group Name by Datastore ID/Name ------------

DSID=$(echo $BASE_PATH | cut -f6 -d"/")
VG_NAME=$(onedatastore show ${DSID} | grep NAME | awk '{print $3}')

# ------------ Copy the image to the repository ------------- 

case $SRC in
http://*)

    exec_and_log "$WGET -O $DST $SRC" \
        "Error downloading $SRC"

    ;;

vmware://*)
    SRC=`echo $SRC|sed  's/vmware:\/\///g'`

    if [ `check_restricted $SRC` -eq 1 ]; then
        log_error "Not allowed to copy images from $RESTRICTED_DIRS"
        error_message "Not allowed to copy image file $SRC"
        exit -1
    fi

    log "Copying local disk folder $SRC to the image repository"

    exec_and_log "cp -rf $SRC $DST" \
        "Error copying $SRC to $DST"

    if [ ! -f $DST/disk.vmdk ]; then
        BASE_DISK_FILE=`ls $DST | grep -v '.*-s[0-9]*\.vmdk'`

        exec_and_log "mv -f $DST/$BASE_DISK_FILE $DST/disk.vmdk" \
            "Error renaming disk file $BASE_DISK_FILE to disk.vmdk"
    fi

    exec_and_log "chmod 0770 $DST"
    ;;

lvm://*)
    #
    # copy of existing machine could be created
    # by using lvm://{{VMID}}/{{DISKID}}
    #
    vmid_diskid_pair=$( echo "$SRC" | sed 's,lvm://,,')
    vmid=$( echo "$vmid_diskid_pair" | cut -d "/" -f 1 )
    diskid=$( echo "$vmid_diskid_pair" | cut -d "/" -f 2 )
    src_volume_mapper_path=/dev/mapper/${VG_NAME}-lv--one--${vmid}--${diskid}
    src_volume=lv-one-${vmid}-${diskid}
    
    hostname=$(onehost list -l NAME,STAT | grep 'on$' | head -n 1 | awk '{print $1}')
    log "hostname: $hostname"
    #exec_and_log "ssh $hostname dd if=${src_volume_mapper_path} of=$DST" \
    #    "Error copying ${src_volume_mapper_path} to $DST"

    # $SSH $DST_HOST $SUDO $LVCREATE
    src_volume_size=$(set -x ; ssh $hostname sudo /sbin/lvs --noheadings --units m | grep $src_volume 2>/dev/null | ( read lv vg states size ; echo $size) )
    SIZE=${src_volume_size/M/}
    log "size: $SIZE"
    exec_and_log "ssh $hostname sudo lvcreate -L ${SIZE}M -n lv-oneimg-${DST_BASENAME} ${VG_NAME}" \
        "Error creating LV ${VG_NAME}/lv-oneimg-${DST_BASENAME}"
    exec_and_log "ssh $hostname dd if=/var/lib/one/${vmid}/images/disk.${diskid} of=/dev/${VG_NAME}/lv-oneimg-${DST_BASENAME}" \
        "Error copying /var/lib/one/${vmid}/images/disk.${diskid} to $DST_BASENAME"
    ;;

vol://*)
    #
    # copy of existing machine could be created
    # by using lvm://{{VMID}}/{{DISKID}}
    #
    vmid_diskid_pair=$( echo "$SRC" | sed 's,vol://,,')
    diskid=$( echo "$vmid_diskid_pair" )
    diskid_hashed=$( oneimage show "$diskid" | grep SOURCE | sed -e 's,.*/,,')
    log "diskid_hashed: $diskid_hashed"
    src_volume_mapper_path=/dev/mapper/${VG_NAME}-lv--oneimg--${diskid_hashed}
    src_volume=lv-oneimg-${diskid_hashed}
    
    hostname=$(onehost list -l NAME,STAT | grep 'on$' | head -n 1 | awk '{print $1}')
    log "hostname: $hostname"
    #exec_and_log "ssh $hostname dd if=${src_volume_mapper_path} of=$DST" \
    #    "Error copying ${src_volume_mapper_path} to $DST"

    # $SSH $DST_HOST $SUDO $LVCREATE
    src_volume_size=$(set -x ; ssh $hostname sudo /sbin/lvs --noheadings --units m | grep $src_volume 2>/dev/null | ( read lv vg states size ; echo $size) )
    SIZE=${src_volume_size/M/}
    log "size: $SIZE"
    exec_and_log "ssh $hostname sudo lvcreate -L ${SIZE}M -n lv-oneimg-${DST_BASENAME} ${VG_NAME}" \
        "Error creating LV ${VG_NAME}/lv-oneimg-${DST_BASENAME}"
    exec_and_log "ssh $hostname dd if=${src_volume_mapper_path} of=/dev/${VG_NAME}/lv-oneimg-${DST_BASENAME}" \
        "Error copying ${src_volume_mapper_path} to $DST_BASENAME"
    ;;

*)
    if [ `check_restricted $SRC` -eq 1 ]; then
        log_error "Not allowed to copy images from $RESTRICTED_DIRS"
        error_message "Not allowed to copy image file $SRC"
        exit -1
    fi
    
    log "Copying image $SRC to the image repository"
    
    hostname=$(onehost list -l NAME,STAT | grep 'on$' | head -n 1 | awk '{print $1}')
    log "hostname: $hostname"

# ----- Determine if uploading from Web interface (to copy to Hypervisor), then import of image to LV -----
# ------------- Requires a /var/lib/one/uploads directory created on Hypervisors --------------------------
# ------------- Requires oneadmin in sudoers on frontend, with permission to run cp, chown, chmod ---------

if [ `echo $SRC | grep -c "/tmp/"` != 0 ]; then
	NEWSRC=$(echo $SRC | cut -f3 -d"/")
	exec_and_log "sudo cp $SRC /var/lib/one/"
	exec_and_log "sudo chown oneadmin:oneadmin /var/lib/one/$NEWSRC"
	exec_and_log "sudo chmod 0660 /var/lib/one/$NEWSRC"
	exec_and_log "scp /var/lib/one/$NEWSRC $hostname:/var/lib/one/uploads/"
	src_volume_size=$(fs_du /var/lib/one/uploads/$NEWSRC $hostname)
	SIZE=${src_volume_size}
	log "size: $SIZE"
	exec_and_log "ssh $hostname sudo lvcreate -L ${SIZE}M -n lv-oneimg-${DST_BASENAME} ${VG_NAME}" \
		"Error creating LV ${VG_NAME}/lv-oneimg-${DST_BASENAME} from upload"
	exec_and_log "ssh $hostname /usr/bin/qemu-img convert -O host_device /var/lib/one/uploads/$NEWSRC /dev/${VG_NAME}/lv-oneimg-${DST_BASENAME}" \
		"Error copying $NEWSRC to $DST_BASENAME from upload"
	exec_and_log "rm -f /var/lib/one/$NEWSRC"
	exec_and_log "ssh $hostname rm -f /var/lib/one/uploads/$NEWSRC"
	else
    src_volume_size=`fs_du $SRC $hostname`
    SIZE=${src_volume_size}
    log "size: $SIZE"
    exec_and_log "ssh $hostname sudo lvcreate -L ${SIZE}M -n lv-oneimg-${DST_BASENAME} ${VG_NAME}" \
        "Error creating LV ${VG_NAME}/lv-oneimg-${DST_BASENAME}"
    exec_and_log "ssh $hostname /usr/bin/qemu-img convert -O host_device $SRC_PATH /dev/${VG_NAME}/lv-oneimg-${DST_BASENAME}" \
        "Error copying $SRC_PATH to $DST_BASENAME"
fi
    ;;
esac

# ---------------- Get the size of the image & fix perms ------------



SIZE=$(ssh $hostname sudo /sbin/lvs --noheadings --units m | grep lv-oneimg-${DST_BASENAME} 2>/dev/null | ( read lv vg states size ; echo $size) )

echo "$DST $SIZE"
#echo "$DST 16384M"
