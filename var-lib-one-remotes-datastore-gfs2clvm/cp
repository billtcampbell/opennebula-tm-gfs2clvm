#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2012, OpenNebula Project Leads (OpenNebula.org)             #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

###############################################################################
# This script is used to copy a VM image (SRC) to the image repository as DST
# Several SRC types are supported
###############################################################################

###############################################################################
#Prepare Environment
###############################################################################

if [ -z "${ONE_LOCATION}" ]; then
    LIB_LOCATION=/usr/lib/one
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    LIB_LOCATION=$ONE_LOCATION/lib
    TMCOMMON=$ONE_LOCATION/lib/one/remotes/tm/tm_common.sh
fi

. /var/lib/one/remotes/scripts_common.sh

DRIVER_PATH=$(dirname $0)
source ${DRIVER_PATH}/../libfs.sh

# include arg_path function
. $TMCOMMON

# include file with LVM helpers definition
. /etc/one/tm/gfs2clvmrc


###############################################################################
# Get 'CP' and Datastore arguments from OpenNebula core
###############################################################################

DRV_ACTION=$1
ID=$2

XPATH="${DRIVER_PATH}/../xpath.rb -b $DRV_ACTION"

unset i XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <($XPATH     /DS_DRIVER_ACTION_DATA/DATASTORE/BASE_PATH \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/RESTRICTED_DIRS \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/SAFE_DIRS \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/UMASK \
                    /DS_DRIVER_ACTION_DATA/IMAGE/PATH)

BASE_PATH="${XPATH_ELEMENTS[0]}"
RESTRICTED_DIRS="${XPATH_ELEMENTS[1]}"
SAFE_DIRS="${XPATH_ELEMENTS[2]}"
UMASK="${XPATH_ELEMENTS[3]}"
SRC="${XPATH_ELEMENTS[4]}"

mkdir -p "$BASE_PATH"
set_up_datastore "$BASE_PATH" "$RESTRICTED_DIRS" "$SAFE_DIRS" "$UMASK"

DST=`generate_image_path`
DST_BASENAME=$( basename "$DST" )
SRC_PATH=`arg_path $SRC`

###############################################################################
# Determine Volume Group Name by Datastore ID/Name
###############################################################################

DSID=$(echo $BASE_PATH | cut -f6 -d"/")
VG_NAME=$(onedatastore show ${DSID} | grep NAME | awk '{print $3}')
CLUSTER=$(onedatastore show ${DSID} | grep CLUSTER | awk '{print $3}')

###############################################################################
# Copy Operations
###############################################################################

case $SRC in


##### Snapshot of existing virtual instance disk (persistent and non-persistent)
#
snapshot://*)
	
    ##Prepare environment for copy
    vmid_diskid_pair=$( echo "$SRC" | sed 's,snapshot://,,')
    vmid=$( echo "$vmid_diskid_pair" | cut -d "/" -f 1 )
    diskid=$( echo "$vmid_diskid_pair" | cut -d "/" -f 2 )
    SRCHDISKID=$(echo '"'$diskid'"')
    IMAGEID=$(onevm show $vmid | grep -A 8 DISK_ID=$searchdiskid | grep IMAGE_ID | cut -f2 -d'"')
    IMAGEHASH=$(oneimage show $IMAGEID | grep SOURCE | cut -f7 -d"/")
    PERSISTENT=$(onevm show $vmid | grep -A 8 DISK_ID=$searchdiskid | grep PERSISTENT | cut -f2 -d'"')
    VM_STATE=$(onevm show $vmid | grep LCM_STATE | awk '{print $3}')
    HOSTID=$(onehost list -l ID,NAME,STAT,CLUSTER | grep ${CLUSTER} | grep on | head -n 1 | awk '{print $1}')
    hostname=$(onehost show ${HOSTID} | grep HOSTNAME | cut -f2 -d'"')
    	log "hostname: $hostname"
    
    ## Determine if VM is running
    if [ $VM_STATE = RUNNING ];
    then
	log "ERROR: Cannot create snapshot of disk attached to running VM"
	exit 1
    else
	log "VM is not in Running state.  Continuing...."
    fi

    ## Create snapshot copy of existing machine disk
    if [ $PERSISTENT = YES ];
    then
	SRC_DS=$(oneimage show "$IMAGEID" | grep DATASTORE | awk '{print $3}')
	src_volume_mapper_path=/dev/mapper/${SRC_DS}-lv--oneimg--${IMAGEHASH}
	src_volume=lv-oneimg-${IMAGEHASH}
	src_volume_size=$( set -x ; ssh $hostname sudo /sbin/lvs --noheadings --units m | grep $src_volume 2>/dev/null | ( read lv vg states size ; echo $size) )
    	SIZE=${src_volume_size/M/}
    	log "size: $SIZE"
    	exec_and_log "ssh $hostname sudo lvcreate -L ${SIZE}m -n lv-oneimg-${DST_BASENAME} ${VG_NAME}" \
        	"Error creating LV ${VG_NAME}/lv-oneimg-${DST_BASENAME}"
    	exec_and_log "ssh $hostname dd if=/var/lib/one/datastores/0/${vmid}/disk.${diskid} of=/dev/${VG_NAME}/lv-oneimg-${DST_BASENAME} bs=32M" \
        	"Error copying /var/lib/one/${vmid}/images/disk.${diskid} to $DST_BASENAME"
    else
    	SRC_DS=$(oneimage show "$IMAGEID" | grep DATASTORE | awk '{print $3}')
    	SRCHASH=$(echo -n /var/lib/one/datastores/0/$vmid/disk.$diskid | md5sum | awk '{print $1}')
    	src_volume_mapper_path=/dev/mapper/${SRC_DS}-lv--one--${vmid}-${SRCHASH}
    	src_volume=lv-one-${vmid}-${SRCHASH}
    	src_volume_size=$( set -x ; ssh $hostname sudo /sbin/lvs --noheadings --units m | grep $src_volume 2>/dev/null | ( read lv vg states size ; echo $size) )
    	SIZE=${src_volume_size/M/}
    	log "size: $SIZE"
    	exec_and_log "ssh $hostname sudo lvcreate -L ${SIZE}m -n lv-oneimg-${DST_BASENAME} ${VG_NAME}" \
        	"Error creating LV ${VG_NAME}/lv-oneimg-${DST_BASENAME}"
    	exec_and_log "ssh $hostname dd if=/var/lib/one/datastores/0/${vmid}/disk.${diskid} of=/dev/${VG_NAME}/lv-oneimg-${DST_BASENAME} bs=32M" \
        	"Error copying /var/lib/one/${vmid}/images/disk.${diskid} to $DST_BASENAME"
    fi
;;

##### Create a clone/copy of existing image in repository
#
image://*)

    ## Prepare environment for copy
    vmid_diskid_pair=$( echo "$SRC" | sed 's,image://,,')
    diskid=$( echo "$vmid_diskid_pair" )
    diskid_hashed=$( oneimage show "$diskid" | grep SOURCE | sed -e 's,.*/,,')
    log "diskid_hashed: $diskid_hashed"
    SRC_DS=$( oneimage show "$diskid" | grep DATASTORE | awk '{print $3}' )
    SRC_DSID=$( oneimage show $diskid | grep SOURCE | cut -f6 -d"/" )
    src_volume_mapper_path=/dev/mapper/${SRC_DS}-lv--oneimg--${diskid_hashed}
    src_volume=lv-oneimg-${diskid_hashed}
    PERSISTENT=$(oneimage show $diskid | grep PERSISTENT | awk '{print $3}')
    IMAGESTATE=$(oneimage show $diskid | grep STATE | awk '{print $3}')
    VMID=$( cat /var/lib/one/datastores/$SRC_DSID/$diskid_hashed.deployed.vmid )
    VM_STATE=$(onevm show $VMID | grep LCM_STATE | awk '{print $3}')
    HOSTID=$(onehost list -l ID,NAME,STAT,CLUSTER | grep ${CLUSTER} | grep on | head -n 1 | awk '{print $1}')
    hostname=$(onehost show ${HOSTID} | grep HOSTNAME | cut -f2 -d'"')
    log "hostname: $hostname"

    ## Determine if persistent image is currently in use
    if [ $PERSISTENT = Yes ]; then
	log "Source Image is a persistent image.  Determining if in use..."
		if [ $IMAGESTATE = used ]; then
			log "Persistent Image is currently in use.  Determining if virtual instance is in running state..."
				if [ $VM_STATE = RUNNING ]; then
					log "ERROR: Cannot create copy of image attached to running VM"
					exit 1
				else
					log "VM is not running"
				fi
		else
			log "Persistent Image is not currently in use"
		fi
    else
	log "Beginning copy..."
    fi

    ## Create copy of existing image
    src_volume_size=$(set -x ; ssh $hostname sudo /sbin/lvs --noheadings --units m | grep $src_volume 2>/dev/null | ( read lv vg states size ; echo $size) )
    SIZE=${src_volume_size/M/}
    log "size: $SIZE"
    exec_and_log "ssh $hostname sudo lvcreate -L ${SIZE}M -n lv-oneimg-${DST_BASENAME} ${VG_NAME}" \
        "Error creating LV ${VG_NAME}/lv-oneimg-${DST_BASENAME}"
    exec_and_log "ssh $hostname dd if=${src_volume_mapper_path} of=/dev/${VG_NAME}/lv-oneimg-${DST_BASENAME} bs=32M" \
        "Error copying ${src_volume_mapper_path} to $DST_BASENAME"
;;

##### Copy image from local source on GFS2 volume
#
*)

    ## Preparing Environment
    if [ `check_restricted $SRC` -eq 1 ]; then
        log_error "Not allowed to copy images from $RESTRICTED_DIRS"
        error_message "Not allowed to copy image file $SRC"
        exit -1
    fi
    
    log "Copying image $SRC to the image repository"

    HOSTID=$(onehost list -l ID,NAME,STAT,CLUSTER | grep ${CLUSTER} | grep on | head -n 1 | awk '{print $1}')
    hostname=$(onehost show ${HOSTID} | grep HOSTNAME | cut -f2 -d'"')
    log "hostname: $hostname"

## Determine if uploading from web interface and copy source to destination image
if [ `echo $SRC | grep -c "/tmp/"` != 0 ]; then
	NEWSRC=$(echo $SRC | cut -f3 -d"/")
	exec_and_log "sudo cp $SRC /var/lib/one/"
	exec_and_log "sudo chown oneadmin:oneadmin /var/lib/one/$NEWSRC"
	exec_and_log "sudo chmod 0660 /var/lib/one/$NEWSRC"
	exec_and_log "scp /var/lib/one/$NEWSRC $hostname:/var/lib/one/uploads/"
	src_volume_size=$(qemu_size /var/lib/one/uploads/$NEWSRC $hostname)
	SIZE=${src_volume_size}
	log "size: $SIZE"
	exec_and_log "ssh $hostname sudo lvcreate -L ${SIZE}M -n lv-oneimg-${DST_BASENAME} ${VG_NAME}" \
		"Error creating LV ${VG_NAME}/lv-oneimg-${DST_BASENAME} from upload"
	exec_and_log "ssh $hostname /usr/bin/qemu-img convert -O host_device /var/lib/one/uploads/$NEWSRC /dev/${VG_NAME}/lv-oneimg-${DST_BASENAME}" \
		"Error copying $NEWSRC to $DST_BASENAME from upload"
	exec_and_log "rm -f /var/lib/one/$NEWSRC"
	exec_and_log "ssh $hostname rm -f /var/lib/one/uploads/$NEWSRC"
	else
    src_volume_size=`qemu_size $SRC $hostname`
    SIZE=${src_volume_size}
    log "size: $SIZE"
    exec_and_log "ssh $hostname sudo lvcreate -L ${SIZE}M -n lv-oneimg-${DST_BASENAME} ${VG_NAME}" \
        "Error creating LV ${VG_NAME}/lv-oneimg-${DST_BASENAME}"
    exec_and_log "ssh $hostname /usr/bin/qemu-img convert -O host_device $SRC_PATH /dev/${VG_NAME}/lv-oneimg-${DST_BASENAME}" \
        "Error copying $SRC_PATH to $DST_BASENAME"
fi
    ;;
esac

###############################################################################
# Get the size of the disk image and fix permissions
###############################################################################

SIZE=$(ssh $hostname sudo /sbin/lvs --noheadings --units m | grep lv-oneimg-${DST_BASENAME} 2>/dev/null | ( read lv vg states size ; echo $size) )
echo "$DST $SIZE"
